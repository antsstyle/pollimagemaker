/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package antsstyle.pollimagemaker.GUI;

import antsstyle.pollimagemaker.configuration.Config;
import antsstyle.pollimagemaker.configuration.DefaultConfig;
import antsstyle.pollimagemaker.tools.ImageTools;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.border.LineBorder;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Ant
 */
public class SettingsPanel extends javax.swing.JPanel {

    private static final Logger LOGGER = LogManager.getLogger();

    /**
     * Creates new form SettingsPanel
     */
    public SettingsPanel() {
        initComponents();
        setSelections();
    }

    private void setSelections() {
        enableAutoCropCheckBox.setSelected(Config.AUTO_CROP);
        saveCroppedImagesCheckBox.setSelected(Config.SAVE_CROPPED_IMAGES);
        borderThicknessLabel.setText("<html>Border thickness: <b>".concat(String.valueOf(Config.BORDER_THICKNESS))
                .concat("</b></html>"));
        double perc = (Config.SQUARE_ASPECTR_HIGHER_LIM - Config.SQUARE_ASPECTR_LOWER_LIM);
        int percentage = (int) Math.round(perc * 50);
        autoCropThresholdsLabel.setText("<html>Current auto-crop thresholds: <b>±".concat(String.valueOf(percentage)).concat("%</b></html>"));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        enableAutoCropCheckBox = new javax.swing.JCheckBox();
        setAutoCropThresholdsButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        autoCropThresholdsLabel = new javax.swing.JLabel();
        setCropButtonSizesButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        saveCroppedImagesCheckBox = new javax.swing.JCheckBox();
        manageCroppedImagesButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        borderThicknessLabel = new javax.swing.JLabel();
        setBorderThickness = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(469, 474));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Interface Settings");

        enableAutoCropCheckBox.setText("Enable Auto-Crop");
        enableAutoCropCheckBox.setToolTipText("");
        enableAutoCropCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableAutoCropCheckBoxActionPerformed(evt);
            }
        });

        setAutoCropThresholdsButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        setAutoCropThresholdsButton.setText("Set Auto-Crop Thresholds");
        setAutoCropThresholdsButton.setToolTipText("");
        setAutoCropThresholdsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setAutoCropThresholdsButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("<html> When enabled, the app will examine each image you drag into it. If it's close enough to being square (or rectangular for single image poll options), the app will crop the center area of the image without prompting you to select a region of the image.</html>");

        autoCropThresholdsLabel.setText("<html>Current auto-crop thresholds: <b>±5%</b></html>");

        setCropButtonSizesButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        setCropButtonSizesButton.setText("Set Crop Button Sizes");
        setCropButtonSizesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setCropButtonSizesButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("<html> You can use the button below to set the size of the \"OK\" and \"Cancel\" buttons in the image cropping popup windows.</html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(enableAutoCropCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(setAutoCropThresholdsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(autoCropThresholdsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(setCropButtonSizesButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(4, 4, 4)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enableAutoCropCheckBox)
                    .addComponent(setAutoCropThresholdsButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(autoCropThresholdsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setCropButtonSizesButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Image Save Settings");

        jLabel3.setText("<html>When enabled, this option will save all the cropped images you used for the final saved poll image in a separate folder, so you can use them again in future.</html>");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Saved Crops");
        jLabel2.setToolTipText("");

        saveCroppedImagesCheckBox.setText("Save cropped images for later use");
        saveCroppedImagesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCroppedImagesCheckBoxActionPerformed(evt);
            }
        });

        manageCroppedImagesButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        manageCroppedImagesButton.setText("Manage Saved Cropped Images");
        manageCroppedImagesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageCroppedImagesButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Image Borders");

        jLabel7.setText("<html>You can set the thickness of the border between images here. Setting a border thickness of 0 will disable the border. (Applies only to the final saved image.)</html>");

        borderThicknessLabel.setText("<html>Border thickness: <b>1</b></html>");

        setBorderThickness.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        setBorderThickness.setText("Set Border Thickness");
        setBorderThickness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setBorderThicknessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(saveCroppedImagesCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(manageCroppedImagesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(borderThicknessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(setBorderThickness)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveCroppedImagesCheckBox)
                    .addComponent(manageCroppedImagesButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(borderThicknessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setBorderThickness)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void autoCropThresholdsMenuChoice() {
        JPanel dialogpanel = new JPanel(new GridLayout(0, 2));
        JLabel label1 = new JLabel();

        label1.setFont(new java.awt.Font("Tahoma", 1, 12));

        label1.setText("Percentage threshold: ");
        int threshold = (int) Math.round((Config.SQUARE_ASPECTR_HIGHER_LIM - Config.SQUARE_ASPECTR_LOWER_LIM) * 50);
        JTextField textField1 = new JTextField();

        textField1.setFont(new java.awt.Font("Tahoma", 1, 12));

        textField1.setText(String.valueOf(threshold));

        dialogpanel.add(label1);
        dialogpanel.add(textField1);

        int res = JOptionPane.showConfirmDialog(GUI.getInstance(), dialogpanel, "Enter new auto-crop threshold.", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION) {
            try {
                int percentage = Integer.parseInt(textField1.getText()
                        .trim());
                if (percentage < 0 || percentage > 100) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "Invalid threshold percentage; enter a whole number of 0 or above.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                }
                double percent = (double) percentage / 100.0;
                DefaultConfig.SQUARE_ASPECTR_LOWER_LIM = 1.0 - percent;
                DefaultConfig.SQUARE_ASPECTR_HIGHER_LIM = 1.0 + percent;
                DefaultConfig.RECT_ASPECTR_LOWER_LIM = 2.0 - (2 * percent);
                DefaultConfig.RECT_ASPECTR_HIGHER_LIM = 2.0 + (2 * percent);
                autoCropThresholdsLabel.setText("<html>Current auto-crop thresholds: <b>±".concat(String.valueOf(percentage)).concat("%</b></html>"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(GUI.getInstance(), "Invalid threshold percentage; enter a whole number of 0 or above.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                LOGGER.error(e);
            }
        }
    }

    private void setAutoCropThresholdsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setAutoCropThresholdsButtonActionPerformed
        autoCropThresholdsMenuChoice();
    }//GEN-LAST:event_setAutoCropThresholdsButtonActionPerformed

    private void enableAutoCropCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableAutoCropCheckBoxActionPerformed
        Config.AUTO_CROP = enableAutoCropCheckBox.isSelected();
    }//GEN-LAST:event_enableAutoCropCheckBoxActionPerformed

    private void saveCroppedImagesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCroppedImagesCheckBoxActionPerformed
        Config.SAVE_CROPPED_IMAGES = saveCroppedImagesCheckBox.isSelected();
    }//GEN-LAST:event_saveCroppedImagesCheckBoxActionPerformed

    private void manageCroppedImagesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageCroppedImagesButtonActionPerformed
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        JPanel panel = new JPanel(new BorderLayout());
        int width = 1250;
        int heightPerImg = 306;
        int scrollBarWidth = (int) UIManager.get("ScrollBar.width");
        int scrollPaneWidth = width + scrollBarWidth;
        scrollPane.setMinimumSize(new Dimension(scrollPaneWidth, heightPerImg * 2));
        scrollPane.setPreferredSize(new Dimension(scrollPaneWidth, heightPerImg * 2));
        scrollPane.setMaximumSize(new Dimension(scrollPaneWidth, heightPerImg * 2));
        panel.setMinimumSize(new Dimension(width + 100, (heightPerImg * 2) + 35));
        panel.setMaximumSize(new Dimension(width + 100, (heightPerImg * 2) + 35));
        panel.setPreferredSize(new Dimension(width + 100, (heightPerImg * 2) + 35));
        panel.setLayout(new javax.swing.BoxLayout(panel, javax.swing.BoxLayout.Y_AXIS));
        JLabel label = new JLabel();
        label.setFont(new java.awt.Font("Tahoma", 1, 12));
        label.setForeground(Color.RED);
        label.setAlignmentX(JLabel.CENTER_ALIGNMENT);
        label.setAlignmentY(JLabel.CENTER_ALIGNMENT);
        label.setText("Select the images you want to delete.");
        label.setPreferredSize(new Dimension(width, 35));
        panel.add(label, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        JPanel childPanel = new JPanel();
        int numSinglePerRow = 4;
        int currentRowCounter = 1;
        int currentCount = 0;
        childPanel.setMinimumSize(new Dimension(width, heightPerImg));
        childPanel.setMaximumSize(new Dimension(width, heightPerImg * 25));
        childPanel.setPreferredSize(new Dimension(width, heightPerImg));
        CropManagerListener.cropSelectionPanel = childPanel;
        scrollPane.setViewportView(childPanel);
        File croppedImageFolder = new File(System.getProperty("user.dir")
                .concat("/croppedimages"));
        if (!croppedImageFolder.exists()) {
            JOptionPane.showMessageDialog(GUI.getInstance(), "No cropped images are saved.", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        File[] croppedImageFiles = croppedImageFolder.listFiles();
        ArrayList<String> allDisplayedImagesFilePaths = new ArrayList<>();
        for (File file : croppedImageFiles) {
            if (MainPanel.inMiddleOfPanel && ((int) ImageTools.getImageDimensionsFromFile(file)
                    .getWidth()) > 300) {
                continue;
            }
            BufferedImage img;
            try {
                img = ImageIO.read(file);
            } catch (Exception e) {
                LOGGER.info("Error reading cropped image, not displaying.", e);
                continue;
            }
            if (img == null) {
                continue;
            }
            if (currentCount == numSinglePerRow) {
                currentCount = 0;
                currentRowCounter++;
            }
            if (img.getWidth() > 300) {
                currentCount += 2;
            } else {
                currentCount++;
            }
            JLabel imageLabel = new JLabel();
            imageLabel.setIcon(new ImageIcon(img));
            imageLabel.setSize(new Dimension(img.getWidth(), img.getHeight()));
            imageLabel.setMaximumSize(new Dimension(img.getWidth(), img.getHeight()));
            imageLabel.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
            imageLabel.setBorder(new LineBorder(Color.BLACK, 1));
            imageLabel.addMouseListener(new CropManagerListener(imageLabel, file.getAbsolutePath()));
            childPanel.add(imageLabel);
            allDisplayedImagesFilePaths.add(file.getAbsolutePath());
            int height = currentRowCounter * heightPerImg + 5;
            childPanel.setMinimumSize(new Dimension(width, height));
            childPanel.setPreferredSize(new Dimension(width, height));
            childPanel.setMaximumSize(new Dimension(width, height));
            childPanel.setSize(width, height);
            childPanel.revalidate();
            childPanel.repaint();
        }
        panel.revalidate();
        panel.repaint();
        scrollPane.revalidate();
        scrollPane.repaint();
        Object[] options = new Object[]{"Delete Selected", "Delete All Images", "Cancel"};
        int res = JOptionPane.showOptionDialog(null, panel, "Manage Cropped Images", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                null, options, options[0]);
        if (res == JOptionPane.YES_OPTION) {
            boolean error = false;
            for (String path : CropManagerListener.selectedPaths) {
                try {
                    Files.delete(Paths.get(path));
                } catch (Exception e) {
                    LOGGER.error(e);
                    error = true;
                }
            }
            if (error) {
                JOptionPane.showMessageDialog(GUI.getInstance(), "An error occurred while deleting the images.\n"
                        + "Consult the logs for more information.", "Error",
                        JOptionPane.ERROR_MESSAGE);
            } else if (CropManagerListener.selectedPaths.size() > 0) {
                JOptionPane.showMessageDialog(GUI.getInstance(), "Images deleted successfully.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } else if (res == JOptionPane.NO_OPTION) {
            res = JOptionPane.showConfirmDialog(null, "This will delete ALL images in the cropped images folder!\nAre you sure?", "Confirm Delete",
                    JOptionPane.YES_NO_OPTION);
            if (res == JOptionPane.YES_OPTION) {
                boolean error = false;
                for (String path : allDisplayedImagesFilePaths) {
                    try {
                        Files.delete(Paths.get(path));
                    } catch (Exception e) {
                        LOGGER.error(e);
                        error = true;
                    }
                }
                if (error) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "An error occurred while deleting the images.\n"
                            + "Consult the logs for more information.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                } else if (CropManagerListener.selectedPaths.size() > 0) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "Images deleted successfully.", "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        CropManagerListener.selectedPaths = new ArrayList<>();
    }//GEN-LAST:event_manageCroppedImagesButtonActionPerformed

    private void setBorderThicknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setBorderThicknessActionPerformed
        JPanel dialogpanel = new JPanel(new GridLayout(0, 2));
        JLabel label1 = new JLabel();

        label1.setFont(new java.awt.Font("Tahoma", 1, 12));

        label1.setText("New border thickness: ");

        JTextField textField1 = new JTextField();

        textField1.setFont(new java.awt.Font("Tahoma", 1, 12));

        textField1.setText(String.valueOf(Config.BORDER_THICKNESS));

        dialogpanel.add(label1);
        dialogpanel.add(textField1);
        int res = JOptionPane.showConfirmDialog(GUI.getInstance(), dialogpanel, "Enter new border thickness.", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION) {
            try {
                int thickness = Integer.parseInt(textField1.getText()
                        .trim());

                if (thickness < 0) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "Border thickness must be a whole number of 0 or above.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (thickness >= 25) {
                    res = JOptionPane.showConfirmDialog(GUI.getInstance(), "Are you sure you want to set a border this thick? It may cause the images"
                            + " to be small.",
                            "Confirm", JOptionPane.YES_NO_OPTION);
                    if (res != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                Config.BORDER_THICKNESS = thickness;
                borderThicknessLabel.setText("<html>Border thickness: <b>".concat(String.valueOf(thickness))
                        .concat("</b></html>"));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(GUI.getInstance(), "Invalid input. Make sure to enter only whole numbers of 0 or above.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                LOGGER.error(e);
            }
        }
    }//GEN-LAST:event_setBorderThicknessActionPerformed

    private void setCropButtonSizesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setCropButtonSizesButtonActionPerformed
        JPanel dialogPanel = new JPanel(new BorderLayout());
        JPanel widthPanel = new JPanel(new BorderLayout());
        JPanel heightPanel = new JPanel(new BorderLayout());
        JLabel widthTextLabel = new JLabel();
        JLabel heightTextLabel = new JLabel();
        String widthText = "New button width (current size: ".concat(String.valueOf(Config.CROP_BUTTONS_WIDTH)).concat("px) ");
        String heightText = "New button width (current size: ".concat(String.valueOf(Config.CROP_BUTTONS_WIDTH)).concat("px) ");
        widthTextLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        heightTextLabel.setFont(new java.awt.Font("Tahoma", 1, 12));
        widthTextLabel.setText(widthText);
        heightTextLabel.setText(heightText);
        Dimension d2 = new Dimension(100,20);
        JTextField widthTextField = new JTextField();
        JTextField heightTextField = new JTextField();
        widthTextField.setMinimumSize(d2);
        widthTextField.setPreferredSize(d2);
        heightTextField.setMinimumSize(d2);
        heightTextField.setPreferredSize(d2);
        widthTextField.setFont(new java.awt.Font("Tahoma", 1, 12));
        heightTextField.setFont(new java.awt.Font("Tahoma", 1, 12));
        widthTextField.setText(String.valueOf(Config.CROP_BUTTONS_WIDTH));
        heightTextField.setText(String.valueOf(Config.CROP_BUTTONS_HEIGHT));
        widthPanel.add(widthTextLabel, BorderLayout.LINE_START);
        widthPanel.add(widthTextField, BorderLayout.LINE_END);
        heightPanel.add(heightTextLabel, BorderLayout.LINE_START);
        heightPanel.add(heightTextField, BorderLayout.LINE_END);
        dialogPanel.add(widthPanel, BorderLayout.NORTH);
        dialogPanel.add(heightPanel, BorderLayout.SOUTH);
        int res = JOptionPane.showConfirmDialog(GUI.getInstance(), dialogPanel, "Enter new crop button sizes.", JOptionPane.OK_CANCEL_OPTION);
        if (res == JOptionPane.OK_OPTION) {
            try {
                int width = Integer.parseInt(widthTextField.getText()
                        .trim());
                int height = Integer.parseInt(heightTextField.getText().trim());
                if (width < 50) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "Button width must be at least 50.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (width >= 500) {
                    res = JOptionPane.showConfirmDialog(GUI.getInstance(), "Are you sure? This will cause the buttons to be huge.",
                            "Confirm", JOptionPane.YES_NO_OPTION);
                    if (res != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                if (height < 10) {
                    JOptionPane.showMessageDialog(GUI.getInstance(), "Button height must be at least 10.", "Error",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (height >= 100) {
                    res = JOptionPane.showConfirmDialog(GUI.getInstance(), "Are you sure? This will cause the buttons to be huge.",
                            "Confirm", JOptionPane.YES_NO_OPTION);
                    if (res != JOptionPane.YES_OPTION) {
                        return;
                    }
                }
                Config.CROP_BUTTONS_WIDTH = width;
                Config.CROP_BUTTONS_HEIGHT = height;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(GUI.getInstance(), "Invalid input. Make sure to enter only whole numbers of 0 or above.", "Error",
                        JOptionPane.ERROR_MESSAGE);
                LOGGER.error(e);
            }
        }
    }//GEN-LAST:event_setCropButtonSizesButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel autoCropThresholdsLabel;
    private javax.swing.JLabel borderThicknessLabel;
    private javax.swing.JCheckBox enableAutoCropCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton manageCroppedImagesButton;
    private javax.swing.JCheckBox saveCroppedImagesCheckBox;
    private javax.swing.JButton setAutoCropThresholdsButton;
    private javax.swing.JButton setBorderThickness;
    private javax.swing.JButton setCropButtonSizesButton;
    // End of variables declaration//GEN-END:variables
}
